import inspect\nfrom typing import Annotated, Callable, Dict, Any, get_origin, Type, Union, List\nfrom typing_extensions import TypeGuard\nimport pydantic as pd\nfrom pydantic import BaseModel\nfrom pydantic_core import PydanticUndefined\n\nclass LLMFunction:\n    def __init__(self, func, schema=None, name=None, description=None, strict=False):\n        self.func = func\n        self.__name__ = func.__name__\n        self.__doc__ = func.__doc__\n        self.__module__ = func.__module__\n        self.schema = schema or get_function_schema(func, strict=strict)\n        if name:\n            self.schema['name'] = name\n        if description:\n            self.schema['description'] = description\n        if schema and (name or description):\n            raise ValueError("Cannot specify name or description when providing a complete schema")\n    \\n    def __call__(self, *args, **kwargs):\n        return self.func(*args, **kwargs)\n\ndef tool_def(function_schema: dict) -> dict:\n    return {\