import pytest\nfrom typing import List, Optional, Union, Annotated\nfrom pydantic import BaseModel, Field, field_validator\nfrom llm_easy_tools import get_function_schema, LLMFunction\nfrom llm_easy_tools.schema_generator import parameters_basemodel_from_function, _recursive_purge_titles, get_name, get_tool_defs\nfrom pprint import pprint\n\ndef simple_function(count: int, size: Optional[float] = None) -> None:\n    """simple function does something"""\n    pass\n\ndef simple_function_no_docstring(apple: Annotated[str, 'The apple'], banana: Annotated[str, 'The banana']) -> None:\n    pass\n\ndef test_function_schema() -> None:\n    function_schema = get_function_schema(simple_function)\n    assert function_schema['name'] == 'simple_function'\n    assert function_schema['description'] == 'simple function does something'\n    params_schema = function_schema['parameters']\n    assert len(params_schema['properties']) == 2\n    assert params_schema['type'] == 'object'\n    assert params_schema['properties']['count']['type'] == 'integer'\n    assert 'size' in params_schema['properties']\n    assert 'title' not in params_schema\n    assert 'title' not in params_schema['properties']['count']\n    assert 'description' not in params_schema\n\ndef test_noparams() -> None:\n    def function_with_no_params() -> None:\n        """This function has a docstring and takes no parameters."""\n        pass\n\n    def function_no_doc() -> None:\n        pass\n\n    result = get_function_schema(function_with_no_params)\n    assert result['name'] == 'function_with_no_params'\n    assert result['description'] == 'This function has a docstring and takes no parameters.'\n    assert result['parameters']['properties'] == {}\n\n    result = get_function_schema(function_no_doc)\n    assert result['name'] == 'function_no_doc'\n    assert result['description'] == ''\n    assert result['parameters']['properties'] == {}\n\ndef test_nested() -> None:\n    class Foo(BaseModel):\n        count: int\n        size: Optional[float] = None\n\n    class Bar(BaseModel):\n        """Some Bar"""\n        apple: str = Field(description='The apple')\n        banana: str = Field(description='The banana')\n\n    class FooAndBar(BaseModel):\n        foo: Foo\n        bar: Bar\n\n    def nested_structure_function(foo: Foo, bars: List[Bar]) -> None:\n        """spams everything"""\n        pass\n\n    function_schema = get_function_schema(nested_structure_function)\n    assert function_schema['name'] == 'nested_structure_function'\n    assert function_schema['description'] == 'spams everything'\n    assert len(function_schema['parameters']['properties']) == 2\n\n    function_schema = get_function_schema(FooAndBar)\n    assert function_schema['name'] == 'FooAndBar'\n    assert len(function_schema['parameters']['properties']) == 2\n\ndef test_methods() -> None:\n    class ExampleClass:\n        def simple_method(self, count: int, size: Optional[float] = None) -> None:\n            """simple method does something"""\n            pass\n\n    example_object = ExampleClass()\n\n    function_schema = get_function_schema(example_object.simple_method)\n    assert function_schema['name'] == 'simple_method'\n    assert function_schema['description'] == 'simple method does something'\n    params_schema = function_schema['parameters']\n    assert len(params_schema['properties']) == 2\n\ndef test_LLMFunction() -> None:\n    def new_simple_function(count: int, size: Optional[float] = None) -> None:\n        """simple function does something"""\n        pass\n\n    func = LLMFunction(new_simple_function, name='changed_name')\n    function_schema = func.schema\n    assert function_schema['name'] == 'changed_name'\n    assert not function_schema.get('strict', False)\n\n    func = LLMFunction(simple_function, strict=True)\n    function_schema = func.schema\n    assert function_schema['strict'] == True\n\ndef test_model_init_function() -> None:\n    class User(BaseModel):\n        """A user object"""\n        name: str\n        city: str\n\n    function_schema = get_function_schema(User)\n    assert function_schema['name'] == 'User'\n    assert function_schema['description'] == 'A user object'\n    assert len(function_schema['parameters']['properties']) == 2\n    assert len(function_schema['parameters']['required']) == 2\n\n    new_function = LLMFunction(User, name='extract_user_details')\n    assert new_function.schema['name'] == 'extract_user_details'\n    assert new_function.schema['description'] == 'A user object'\n    assert len(new_function.schema['parameters']['properties']) == 2\n    assert len(new_function.schema['parameters']['required']) == 2\n\ndef test_case_insensitivity() -> None:\n    class User(BaseModel):\n        """A user object"""\n        name: str\n        city: str\n\n    function_schema = get_function_schema(User, case_insensitive=True)\n    assert function_schema['name'] == 'user'\n    assert get_name(User, case_insensitive=True) == 'user'\n\ndef test_function_no_type_annotation() -> None:\n    def function_with_missing_type(param) -> None:\n        return f'Value is {param}'\n\n    with pytest.raises(ValueError) as exc_info:\n        get_function_schema(function_with_missing_type)\n    assert str(exc_info.value) == "Parameter 'param' has no type annotation"\n\ndef test_pydantic_param() -> None:\n    class Query(BaseModel):\n        query: str\n        region: str\n\n    def search(query: Query) -> None:\n        ...\n\n    schema = get_tool_defs([search])\n\n    assert schema[0]['function']['name'] == 'search'\n    assert schema[0]['function']['description'] == ''\n    assert schema[0]['function']['parameters']['properties']['query']['$ref'] == '#/$defs/Query'\n\ndef test_strict() -> None:\n    class Address(BaseModel):\n        street: str\n        city: str\n\n    class Company(BaseModel):\n        name: str\n        speciality: str\n        addresses: list[Address]\n\n    def print_companies(companies: list[Company]) -> None:\n        ...\n\n    schema = get_tool_defs([print_companies], strict=True)\n\n    pprint(schema)\n\n    function_schema = schema[0]['function']\n\n    assert function_schema['name'] == 'print_companies'\n    assert function_schema['strict'] == True\n    assert function_schema['parameters']['additionalProperties'] == False\n    assert function_schema['parameters']['$defs']['Address']['additionalProperties'] == False\n    assert function_schema['parameters']['$defs']['Address']['properties']['street']['type'] == 'string'\n    assert function_schema['parameters']['$defs']['Company']['additionalProperties'] == False\n